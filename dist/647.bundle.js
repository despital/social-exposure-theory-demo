"use strict";(self.webpackChunksocial_exposure_theory=self.webpackChunksocial_exposure_theory||[]).push([[647],{7647:(e,o,t)=>{t.r(o),t.d(o,{run:()=>p}),t(5259),t(2621);var n=t(7299),s=t(9925),i=t(6430),r=t(1958),a=t(4783);const l={PHASE1_TRIALS:5,PHASE2_TRIALS:5};async function p({assetPaths:e,input:o={},environment:t,title:p,version:c}){const u=(0,n.N3)({show_progress_bar:!0,auto_update_progress_bar:!1,on_finish:function(){u.data.displayData()}}),h=(0,a.MI)(u);let m=(0,a.Oq)();m=(0,a.Gc)(m,u);const d=function(e,o,t){const n=[];let s,i;"equal"===o.condition?(s=.5,i=.5):"red"===o.majorityGroup?(s=.8,i=.2):(s=.2,i=.8);for(let o=0;o<l.PHASE1_TRIALS;o++){const i=Math.round(r.P.FACES_PER_TRIAL*s),a=r.P.FACES_PER_TRIAL-i,l=e.filter(e=>"red"===e.color),p=e.filter(e=>"blue"===e.color),c=t.randomization.sampleWithoutReplacement(l,i),u=t.randomization.sampleWithoutReplacement(p,a),h=t.randomization.shuffle([...c,...u]);n.push({trialNum:o+1,faces:h})}return n}(m,h,u),g=function(e,o){const t=[],n=[{red:4,blue:0},{red:3,blue:1},{red:2,blue:2},{red:1,blue:3},{red:0,blue:4}],s=e.filter(e=>"red"===e.color),i=e.filter(e=>"blue"===e.color);for(let e=0;e<l.PHASE2_TRIALS;e++){const r=n[e],a=o.randomization.sampleWithoutReplacement(s,r.red),l=o.randomization.sampleWithoutReplacement(i,r.blue),p=o.randomization.shuffle([...a,...l]);t.push({trialNum:e+1,composition:`${r.red}R-${r.blue}B`,redCount:r.red,blueCount:r.blue,faces:p})}return t}(m,u);let f=0,_=0,y=0,P=0;console.log("DEMO Experiment initialized:",{condition:h.condition,majorityGroup:h.majorityGroup,informed:h.informed,phase1Trials:d.length,phase2Trials:g.length});const b=[],v={type:s.A,stimulus:'\n            <h1>Social Exposure Theory Experiment</h1>\n            <h2 style="color: #e74c3c;">DEMO VERSION</h2>\n            <p>This is a simplified demo with only 5 trials per phase.</p>\n            <p>Press any key to begin.</p>\n        ',on_start:function(){u.progressBar.progress=0}};b.push(v);const A={type:s.A,stimulus:function(){let e='\n                <div style="max-width: 800px; margin: auto; text-align: left;">\n                    <h2>Phase 1: Learning Task</h2>\n                    <p>You will see <strong>4 faces</strong> on each trial.</p>\n                    <p>Your task is to choose <strong>one person</strong> to interact with by clicking on their face.</p>\n                    <p>After your choice, you will receive either a <strong>reward (+1)</strong> or a <strong>punishment (-5)</strong>.</p>\n                    <p><strong>Your goal is to maximize your total score.</strong></p>\n            ';return h.informed&&(e+="\n                    <p><strong>Important information:</strong> The faces have colored backgrounds (red or blue).\n                    Both groups have similar proportions of people who tend to give rewards vs punishments.</p>\n                "),e+="\n                    <p><strong>Demo:</strong> You will complete 5 trials.</p>\n                    <p>Press any key to start.</p>\n                </div>\n            ",e}};b.push(A);const T={timeline:[{type:i.A,images:function(){return u.evaluateTimelineVariable("faces").map(e=>({src:e.imagePath,color:e.color,data:{id:e.id,isGood:e.isGood}}))},prompt:function(){return`\n                <div class="score-display">Phase 1 Score: ${f}</div>\n                <p>Choose a person to interact with:</p>\n            `},image_width:200,image_height:200,grid_columns:2,gap:20,data:function(){return{task:"phase1_choice",phase:1,trial_num:u.evaluateTimelineVariable("trialNum")}},on_finish:function(e){const o=u.evaluateTimelineVariable("faces")[e.response],t=(0,a.p8)(o);f+=t,y++,e.chosen_face_id=o.id,e.chosen_face_color=o.color,e.chosen_face_is_good=o.isGood,e.outcome=t,e.phase1_score=f;const n=y/l.PHASE1_TRIALS;u.progressBar.progress=.4*n}},{type:s.A,stimulus:function(){const e=u.data.get().last(1).values()[0].outcome;return`\n                <div class="score-display">Phase 1 Score: ${f}</div>\n                <div class="feedback ${e>0?"positive":"negative"}">\n                    ${e>0?`+${e}`:e}\n                </div>\n                <p>Press any key to continue</p>\n            `},trial_duration:1500,data:{task:"phase1_feedback",phase:1}}],timeline_variables:d};b.push(T);const w={type:s.A,stimulus:function(){return`\n                <h2>Phase 1 Complete!</h2>\n                <p>Your Phase 1 score: <strong>${f}</strong></p>\n                <p>Press any key to continue to Phase 2.</p>\n            `},post_trial_gap:500};b.push(w);const k={type:s.A,stimulus:'\n            <div style="max-width: 800px; margin: auto; text-align: left;">\n                <h2>Phase 2: Partner Choice Task</h2>\n                <p>In this phase, you will see <strong>4 new faces</strong> on each trial.</p>\n                <p>Your task is to choose <strong>one person</strong> you would like to interact with.</p>\n                <p><strong>Note:</strong> You will NOT receive immediate feedback after each choice.</p>\n                <p>At the end of this phase, you will see your total score for Phase 2.</p>\n                <p><strong>Demo:</strong> You will complete 5 trials.</p>\n                <p>Press any key to start Phase 2.</p>\n            </div>\n        ',data:{task:"phase2_instructions"}};b.push(k);const S={timeline:[{type:i.A,images:function(){return u.evaluateTimelineVariable("faces").map(e=>({src:e.imagePath,color:e.color,data:{id:e.id,isGood:e.isGood}}))},prompt:function(){return`\n                <p>Choose a person you would like to interact with:</p>\n                <p style="color: #666; font-size: 14px;">Trial ${P+1} of ${l.PHASE2_TRIALS}</p>\n            `},image_width:200,image_height:200,grid_columns:2,gap:20,data:function(){return{task:"phase2_choice",phase:2,trial_num:u.evaluateTimelineVariable("trialNum"),composition:u.evaluateTimelineVariable("composition"),red_count:u.evaluateTimelineVariable("redCount"),blue_count:u.evaluateTimelineVariable("blueCount")}},on_finish:function(e){const o=u.evaluateTimelineVariable("faces")[e.response],t=(0,a.p8)(o);_+=t,P++,e.chosen_face_id=o.id,e.chosen_face_color=o.color,e.chosen_face_is_good=o.isGood,e.outcome=t,e.phase2_score=_;const n=P/l.PHASE2_TRIALS*.6;u.progressBar.progress=.4+n}}],timeline_variables:g};b.push(S);const E={type:s.A,stimulus:function(){return`\n                <h2>Phase 2 Complete!</h2>\n                <p>Your Phase 2 score: <strong>${_}</strong></p>\n                <p>Press any key to continue.</p>\n            `},post_trial_gap:500};b.push(E);const R={type:s.A,stimulus:function(){return`\n                <h2>Demo Complete!</h2>\n                <h3>Summary</h3>\n                <p>Phase 1 score: <strong>${f}</strong> (${l.PHASE1_TRIALS} trials)</p>\n                <p>Phase 2 score: <strong>${_}</strong> (${l.PHASE2_TRIALS} trials)</p>\n                <p>Total combined score: <strong>${f+_}</strong></p>\n                <hr>\n                <p style="color: #666;">Condition: ${h.condition}, Majority: ${h.majorityGroup}, Informed: ${h.informed}</p>\n                <p>Press any key to view data.</p>\n            `},post_trial_gap:500};b.push(R),await u.run(b)}}}]);